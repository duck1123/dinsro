* Setup

These are the perquisites before running

** Install Dependencies

*** Docker

#+BEGIN_SRC shell
  sudo apt install docker-ce
#+END_SRC

*** k3d

https://k3d.io/v5.4.6/#installation

#+BEGIN_SRC shell
  wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
#+END_SRC

*** Earthly

https://earthly.dev/get-earthly

#+BEGIN_SRC shell
  sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly \
       && chmod +x /usr/local/bin/earthly \
       && /usr/local/bin/earthly bootstrap --with-autocomplete'
#+END_SRC

*** Devspace

**** Install

https://www.devspace.sh/docs/getting-started/installation

#+BEGIN_SRC shell
  curl -L -o devspace "https://github.com/loft-sh/devspace/releases/latest/download/devspace-linux-amd64" \
      && sudo install -c -m 0755 devspace /usr/local/bin
#+END_SRC

**** Set Aliases

This is an optional step.

#+BEGIN_SRC shell
  alias d="devspace"
  alias dr="devspace run"
#+END_SRC

*** Clojure

https://clojure.org/guides/install_clojure#_linux_instructions

#+BEGIN_SRC shell
  CLOJURE_VERSION=1.11.1.1208 \
    curl -O https://download.clojure.org/install/linux-install-${CLOJURE_VERSION}.sh \
    && chmod +x linux-install-${CLOJURE_VERSION}.sh \
    && sudo ./linux-install-${CLOJURE_VERSION}.sh
#+END_SRC

** Create Cluster Environment

*** Create Registry

This will create a registry to share created images with the cluster

#+BEGIN_SRC shell
  k3d registry create myregistry.localtest.me --port 12345
#+END_SRC

*** Create Cluster

This will create a single node kubernetes cluster in a docker container

#+BEGIN_SRC  shell
  k3d cluster create \
      --api-port 6550 \
      -p "80:80@loadbalancer" \
      -p "443:443@loadbalancer" \
      --k3s-server-arg "--no-deploy=traefik"
      --servers 1 \
      --registry-use k3d-myregistry.localtest.me:12345 \
      --kubeconfig-update-default
#+END_SRC

*** install cert-manager

https://cert-manager.io/docs/installation/kubectl/

**** install cert manager manifests

#+BEGIN_SRC  shell
  kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml
#+END_SRC

**** Create letsencrypt provider

#+BEGIN_SRC  shell
EMAIL=someuser@example.com cat <<EOF | kubectl apply -f -
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: ${EMAIL}
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: traefik
EOF
#+END_SRC

*** Create namespace

#+BEGIN_SRC  shell
kubectl create namespace dinsro
#+END_SRC

* Build

** Deploy

#+BEGIN_SRC  shell
  devspace deploy
#+END_SRC

* Dev

** If running inside the devimage fails

#+BEGIN_SRC shell
  rm -rf node_modules
  bb install
#+END_SRC

* Cleaning up

** Delete Cluster

#+BEGIN_SRC  shell
  k3d cluster delete k3s-default
#+END_SRC

** Delete Registry

#+BEGIN_SRC  shell
  k3d registry delete k3d-myregistry.localtest.me
#+END_SRC

* Running

** Docker

#+BEGIN_SRC  shell
  docker run -it -p 3000:3000 duck1123/dinsro:latest
#+END_SRC
